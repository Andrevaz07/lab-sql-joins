#List the number of films per category.

SELECT c.name AS category , COUNT(*) AS number_of_film
FROM category c 
JOIN film_category fc ON c.category_id = fc.category_id
JOIN film f ON f.film_id = fc.film_id
GROUP BY c.name ;

#Retrieve the store ID, city, and country for each store.

SELECT s.store_id, c.city AS city_name , cc.country AS country_name 
FROM city c 
JOIN country cc ON c.country_id = cc.country_id
JOIN address a ON a.city_id = c.city_id
JOIN store s ON a.address_id = s.address_id;


#Calculate the total revenue generated by each store in dollars.
SELECT s.store_id, SUM(p.amount) AS total_amount_$
FROM store s
JOIN staff st ON s.store_id = st.store_id
JOIN payment p ON st.staff_id = p.staff_id
GROUP BY s.store_id ;

#Determine the average running time of films for each category.

SELECT c.name AS category , AVG(f.length) AS average_duration
FROM film f
JOIN film_category fc ON f.film_id = fc.film_id
JOIN category c ON fc.category_id = c.category_id
GROUP BY c.name;


#BONUS 
#Identify the film categories with the longest average running time.
SELECT c.name AS category , AVG(f.length) AS average_duration
FROM film f
JOIN film_category fc ON f.film_id = fc.film_id
JOIN category c ON fc.category_id = c.category_id
GROUP BY c.name
ORDER BY average_duration DESC;

#Display the top 10 most frequently rented movies in descending order.
SELECT f.title, COUNT(*) AS frequency_of_rentals
FROM rental r 
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id
GROUP BY f.title
ORDER BY  frequency_of_rentals DESC
LIMIT 10;


#Determine if "Academy Dinosaur" can be rented from Store 1.
#Provide a list of all distinct film titles, along with their availability status in the inventory. Include a column indicating whether each title is 'Available' or 'NOT available.' Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."
